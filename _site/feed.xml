<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jesse Crow</title>
    <description>Portfolio site for Austin-based designer and developer, Jesse Crow.
</description>
    <link>http://www.jessecrow.com/blog/</link>
    <atom:link href="http://www.jessecrow.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Jun 2017 22:04:55 -0500</pubDate>
    <lastBuildDate>Tue, 06 Jun 2017 22:04:55 -0500</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Animating Height</title>
        <description>&lt;p&gt;I‚Äôve recently worked on a couple of projects where I‚Äôve needed to animate the height of an element. Due to varying markup structures and project requirements, I used different techniques to accomplish this animation. I experimented with animating the height, max-height, and scale(Y) of and element. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
		&lt;span class=&quot;list__title&quot;&gt;Scale(Y)&lt;/span&gt;
		&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;b73dd3f9cfcea509294c5050ea87fe94&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;animate height with scaleY()&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/b73dd3f9cfcea509294c5050ea87fe94/&quot;&gt;animate height with scaleY()&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
		&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
	    &lt;p&gt;There are two pros to animating height with scale(Y). The first is that you don&#39;t need to know what the height of the element will be. This is because you can animate scale(Y) to 1, which is the full height of an element. The second is that it works if you are animating multiple elements that have different heights.&lt;/p&gt;
	    &lt;p&gt;The con to animating height with scale(Y) is that the element will always take up its full height, even when scale(Y) is set to 0. Scale(Y) doesn&#39;t affect the flow of surrounding elements, so they won&#39;t adjust to take up the apparent empty space of an element with a scale(Y) value of less than 1. &lt;a href=&quot;https://tympanus.net/codrops/css_reference/transform/&quot;&gt;Tympanus&lt;/a&gt; has an article that goes more in depth about transforms and how content does or doesn&#39;t reflow.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;span class=&quot;list__title&quot;&gt;Height&lt;/span&gt;
		&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;9c0b3c38d1599a9436a8c92ab63045c7&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;animate height with height&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/9c0b3c38d1599a9436a8c92ab63045c7/&quot;&gt;animate height with height&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
		&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
    	&lt;p&gt;The pro to animating an element&#39;s height using height is that the elements around what&#39;s being animated reflow while its height is less than its full height.&lt;/p&gt;
    	&lt;p&gt;The con to animating with height is that you need to know the exact height of the element being animated. If the height value you animate to is smaller than the element&#39;s actual height, part of the element will be cut off. If it&#39;s larger, there will be extra space between the element that&#39;s being animated and the element below it.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;span class=&quot;list__title&quot;&gt;Max-Height&lt;/span&gt;
		&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;38d55ec6b7a83ad7506a31ca8b6344ee&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;animate height with max-height&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/38d55ec6b7a83ad7506a31ca8b6344ee/&quot;&gt;animate height with max-height&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
		&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
    	&lt;p&gt;There are two pros to animating the height of an element with max-height. The first is that the elements around what&#39;s being animated reflow when it&#39;s smaller than its full height. The second is that you don&#39;t need to know the exact height of what&#39;s being animated. Max-height is especially useful when working with dynamic content.&lt;/p&gt;
    	&lt;p&gt;The con to animating with max-height is the possibility of a jarring animation. If the max-height you animate to is a lot larger than the actual height of the element, the animation will run very quickly.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://www.jessecrow.com/blog/2017/03/13/animating-height.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2017/03/13/animating-height.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning CSS Grid</title>
        <description>&lt;p&gt;Today I made my first layout with CSS Grid and I am SO sad I waited this long to start learning how to use it! Layout possiblities are endless and I‚Äôm excited about how creative CSS Grid empowers designers and developers to be. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/grid.jpg&quot; alt=&quot;CSS grid layout in the browser with visualizer tool in use&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For my first layout, I followed along with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout&quot;&gt;MDN‚Äôs CSS Grid Basics Documentation&lt;/a&gt;, using CodePen and Firefox Developer Edition (the grid visualizer helped me truly understand the grid I made). &lt;/p&gt;

&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;evprbV&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;First CSS Grid üéâ&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/evprbV/&quot;&gt;First CSS Grid üéâ&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you have a &lt;a href=&quot;http://caniuse.com/#search=grid&quot;&gt;supported browser&lt;/a&gt;, you can see the grid in the CodePen above. I commented everything in the CSS to use as reference in future grid layouts. I can‚Äôt wait to build more.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://www.jessecrow.com/blog/2017/02/28/learning-css-grid.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2017/02/28/learning-css-grid.html</guid>
        
        
      </item>
    
      <item>
        <title>Wayfinding with Animation</title>
        <description>&lt;p&gt;Last week I worked on ways to draw the user‚Äôs attention to a hamburger menu. I thought back to Val Head and Sarah Drasner‚Äôs &lt;a href=&quot;https://webanimationworkshops.com/&quot;&gt;animation workshop&lt;/a&gt;, which I was lucky enough to attend last year and thought, ‚Äúanimation can help me with this.‚Äù I wanted to get the user‚Äôs attention to the hamburger menu, but not in an obnoxious ‚ÄúLOOK AT ME HEY HI HELLO!!!‚Äù way. I prototyped three possible solutions.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
		&lt;span class=&quot;list__title&quot;&gt;Draw and Bounce&lt;/span&gt;
		&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;WpeeQB&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;header animation prototype - draw &amp;amp; bounce&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/WpeeQB/&quot;&gt;header animation prototype - draw &amp;amp; bounce&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
		&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
	    &lt;p&gt;The draw and bounce animation consists of two parts: the draw and the bounce.&lt;/p&gt;
	    &lt;p&gt;The lines of the hamburger menu are drawn in from the left to the right, which hints at the direction the content will come into view when the hamburger menu is opened. I wanted to portray to the user that something will come in from the left when you click the burger icon.&lt;/p&gt;
	    &lt;p&gt;Since the draw part of the animation is very subtle, I added in a little bounce after all parts of the hamburger menu are on the screen. If the user misses the draw, they are likely to see the bounce and know to click the hamburger to see more.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;span class=&quot;list__title&quot;&gt;Grow and Wave&lt;/span&gt;
		&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;wJwwaN&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;header animation prototype - grow &amp;amp; wave&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/wJwwaN/&quot;&gt;header animation prototype - grow &amp;amp; wave&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
		&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
    	&lt;p&gt;I wanted this animation to be friendly without being overbearing, inviting the user‚Äôs attention to the hamburger menu. I explored versions of this without the hamburger menu growing, but just the wave could be missed with everything else happening on the product‚Äôs home page. In this case, scaling the hamburger menu up made sure the wave would be seen.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;span class=&quot;list__title&quot;&gt;Glow&lt;/span&gt;
		&lt;p data-height=&quot;300&quot; data-theme-id=&quot;12329&quot; data-slug-hash=&quot;KaEJJx&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;header animation prototype - glow&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/KaEJJx/&quot;&gt;header animation prototype - glow&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
		&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
    	&lt;p&gt;This animation was inspired by something I&#39;ve seen a lot on mobile: when you touch a part of the screen, the background around what you touched has a colored circle around it. I wanted to explore a version of this since it seems to be a common wayfinding pattern.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting to prototype different animation-based solutions to solve a problem for users was a really fun experience and I hope I get to do more of it in the future! Animation is a wonderful way to help your users find their way in your product. üéâ&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://www.jessecrow.com/blog/2017/02/21/wayfinding-with-animation.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2017/02/21/wayfinding-with-animation.html</guid>
        
        
      </item>
    
      <item>
        <title>Learn by Recreating</title>
        <description>&lt;p&gt;There are so many things that are possible with design and front end development. One of the best ways I‚Äôve found to learn a new skill is to recreate.&lt;/p&gt;

&lt;p&gt;What this looks like for me (most of the times) is scrolling through CodePen, finding myself in awe of a Pen, and setting out to make something similar on my own.&lt;/p&gt;

&lt;p&gt;Earlier this week, I found &lt;a href=&quot;http://codepen.io/made-on-mars/pen/JROYzo&quot;&gt;this Pen by Made on Mars.&lt;/a&gt; Isn‚Äôt it gorgeous?! I‚Äôm working on upping my animation skills, and having an SVG appear drawn on the page as you scroll down is something I hadn‚Äôt thought of. After a few minutes of scrolling up and down I knew this was something I wanted to learn how to do. &lt;/p&gt;

&lt;p&gt;The HTML and CSS were straightforward. I used an SVG I made of a bouquet of flowers and made sure I had classes attached to the correct elements. I‚Äôve worked with animating this SVG before, so I had stroke-dashoffset values for all the components. For this Pen, I wanted to keep the CSS simple, so I used the largest stroke-dashoffset value for all of the elements.&lt;/p&gt;

&lt;p&gt;I focused mostly on the JS for this Pen. The original Pen by Made on Mars uses jQuery. Since I usually work with vanilla JS at work, I knew I wanted to rewrite the JS accordingly. This is where things got tricky‚Äîand where I learned the most! The Pen I used for inspiration didn‚Äôt have any comments, so I had to figure the logic on my own. The main things I learned about are clientHeight, innerHeight, scrollHeight, scrollY.&lt;/p&gt;

&lt;p&gt;I had a lot of fun making this pen and can‚Äôt wait to put the skills I improved to use again.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;ygRQmK&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;draw svg as scroll&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/ygRQmK/&quot;&gt;draw svg as scroll&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sun, 12 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://www.jessecrow.com/blog/2017/02/12/learn-by-recreating.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2017/02/12/learn-by-recreating.html</guid>
        
        
      </item>
    
      <item>
        <title>Blogging and Branding Basics</title>
        <description>&lt;p&gt;This post is adapted from a talk I recently gave about portfolio branding and blogging basics to students at The Iron Yard‚Äôs Austin campus. What follows are some branding and blogging tips, tricks, and pitfalls I‚Äôve encountered over the past couple of years.&lt;/p&gt;

&lt;p&gt;Before we jump into a discussion about branding, it‚Äôs important to level set on a definition of branding. For this purpose, branding is defined as representation of your personal voice, either in the tone and/or design of your portfolio. There are three big reasons why it‚Äôs important to have a brand. The first is so people (especially potential employers or clients) have a sense of who you are. The second is so that your sense of self is clearly communicated. And the third is so that you can stand out.&lt;/p&gt;

&lt;p&gt;There are some simple ways that you can brand your portfolio. &lt;/p&gt;

&lt;p&gt;The first is color. Colors communicate meaning. Most of these meanings are subjective, but there are some general cultural color associations. Smashing Magazine has a wonderful &lt;a href=&quot;https://www.smashingmagazine.com/2010/01/color-theory-for-designers-part-1-the-meaning-of-color/&quot;&gt;series on color theory&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The colors you pick for your portfolio matter. For example: if you want to communicate a sense of calm, using fire engine red wouldn‚Äôt be the best choice because it conveys a sense of urgency. Make¬†sure the colors you use in your portfolio are also accessible. &lt;a href=&quot;http://webaim.org/resources/contrastchecker/&quot;&gt;WebAIM‚Äôs color contrast checker&lt;/a&gt; is my go to resource.&lt;/p&gt;

&lt;p&gt;Another way you can brand your portfolio is typography. Basic typography on the web includes typeface selection, spacing, and size. Much like color, typefaces convey meanings. For example, if you want to communicate that you are consistent and methodical, a geometric sans-serif would be a better pick than Comic Sans. Smashing Magazine has a &lt;a href=&quot;https://www.smashingmagazine.com/2010/12/what-font-should-i-use-five-principles-for-choosing-and-using-typefaces/&quot;&gt;list of tips to choose type&lt;/a&gt;. &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt; is a free, bountiful resource for typefaces. And my former teacher Sam Kapila has a wonderful &lt;a href=&quot;http://samkapila.com/design-starter-kit/&quot;&gt;design starter kit&lt;/a&gt;, which has excellent and practical tips on typography.&lt;/p&gt;

&lt;p&gt;You can also brand your portfolio with the work you show. Initially, your portfolio will be mostly or completely comprised of class projects. But your class projects don‚Äôt have to just be class projects‚Äîyou can add your personality. My class projects include a hackathon project that is a garden planning app and a redesign of parts of the National Park Service website. People who are viewing my personal site might not know a lot about me, but my projects help them get a sense of who I am as more than just a designer/developer. &lt;/p&gt;

&lt;p&gt;One of the best branding tools you have is your blog. It‚Äôs more of a long term commitment than choosing colors and type. It‚Äôs best to set a schedule and stick to it. Treat it like another homework assignment, and set aside 30 minutes to an hour to work on a post. Your posts don‚Äôt need to be lengthy or revolutionary‚Äîthey just need to share your thoughts in your voice.&lt;/p&gt;

&lt;p&gt;Why is it important to blog? Blogging shows your process; it allows people to see how you think and approach a problem (and find solutions). It shows your voice and allows people to get a sense of who you are as a person. Blogging also gives people something to remember. it increases your chances of being more than just another portfolio and helps you stand out. Blogging ultimately helps you present yourself as more than your work. &lt;/p&gt;

&lt;p&gt;Blogging has many benefits, but it also comes with some anxieties. The two most common I hear from bootcamp students are fear of saying something wrong and fear of not having anything original to say. &lt;/p&gt;

&lt;p&gt;You might say something wrong (and that‚Äôs okay!). No one knows everything. The people who make the design and dev communities fun to be part of will be kind and help you learn. One thing you can do to lessen this fear is use your community for a fact check before you publish. &lt;/p&gt;

&lt;p&gt;Everyone brings something to the table. Even if you are blogging about an established concept, the way you understand it, explain it, and use it is unique. Add your voice to the conversation! We all benefit from it.&lt;/p&gt;

&lt;p&gt;Another thing I hear a lot when talking to bootcamp students is not knowing what to write about. Here‚Äôs a brief list of ideas, written with bootcamp students in mind, but that can be tweaked for wherever in your career you are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Something you learned in class and how you understand it.&lt;/li&gt;
  &lt;li&gt;Something you built in class and how you made it.&lt;/li&gt;
  &lt;li&gt;Something you didn‚Äôt understand at first, but now you get, and what helped you understand it.&lt;/li&gt;
  &lt;li&gt;Something you‚Äôre excited about learning.&lt;/li&gt;
  &lt;li&gt;A programmer/designer/website/app/product you admire and why.&lt;/li&gt;
  &lt;li&gt;Something you‚Äôre excited about building.&lt;/li&gt;
  &lt;li&gt;What your TIY experience is like (day in the life kind of thing).&lt;/li&gt;
  &lt;li&gt;What music you listen to when you code.&lt;/li&gt;
  &lt;li&gt;Your origin story.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put thought into the colors, type, and projects you use in your portfolio. Dedicate time to blog. If you do so, your personal site will be an accurate representation of who you are and you‚Äôll be well prepared for the post-graduation job search.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://www.jessecrow.com/blog/2016/12/28/blogging-and-branding-basics.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2016/12/28/blogging-and-branding-basics.html</guid>
        
        
      </item>
    
      <item>
        <title>How My Liberal Arts Education Helps Me as a Developer</title>
        <description>&lt;p&gt;Today is my one year workaversary, which also happens to be my one year anniversary of being a professional developer. (‚ÄúProfessional developer‚Äù still feels weird to say/write.) It‚Äôs been a year full of professional challenges and victories, and I‚Äôve felt prepared every step of the way. &lt;/p&gt;

&lt;p&gt;I accomplished my first year as a developer because of my family and friends. Because of my instructors, classmates, community, and training at The Iron Yard. And more and more over the past year I‚Äôve realized that I accomplished my first year as a developer in some part because of my liberal arts education and humanities background.&lt;/p&gt;

&lt;p&gt;But‚Ä¶a humanities degree from a liberal arts college‚Ä¶applicable to front end development? I know, I‚Äôve heard the skeptics‚Äô sounds before. Writing a thesis on media coverage of major oil spills through the lens of Ulrich Beck‚Äôs Risk Society and architecting and documenting a pattern library are different. However, the core skills and competencies I learned in undergrad have been invaluable to my work as a front end developer. Here are four of the biggest lessons from my liberal arts education I‚Äôve carried with me: &lt;/p&gt;

&lt;h5&gt;Appreciating Interconnectedness&lt;/h5&gt;

&lt;p&gt;During my time in undergrad, I got the most of my education when I took time to think about how my classes related to each other. I took a class that combined film theory, communication studies, and history. Sometimes I would walk out of a comm ethics class thinking about what I learned in environmental studies earlier that week. My studies were enriched because of the parallels I could draw between courses.&lt;/p&gt;

&lt;p&gt;At work, specifically, there‚Äôs a way for all four disciplines (research, UX, visual design, and front end development) to work together. The work that is produced from an interdisciplinary approach is undeniably better than work produced if everyone worked in a bubble. We can all learn from each other, grow, and better our own work because of that knowledge.&lt;/p&gt;

&lt;h5&gt;Critical and Creative Thinking&lt;/h5&gt;

&lt;p&gt;When I was exposed to a different or unorthodox perspective in a reading assignment or class discussion, I had to reconcile how it fit with my own worldview. I had to really think and have solid reasoning as to why or why not I held a certain view. ‚ÄúBecause I‚Äôve always felt this way‚Äù was never an acceptable answer.&lt;/p&gt;

&lt;p&gt;As a front end developer, I solve problems daily. Whether it‚Äôs thinking about the structure of the project, the structure and architecture of the code itself, debugging, or working with the designers on the team‚Äîthere are always challenges to solve and learn from. ‚ÄúBecause this is the way it‚Äôs always been done‚Äù is never an acceptable answer.&lt;/p&gt;

&lt;h5&gt;Writing&lt;/h5&gt;

&lt;p&gt;In undergrad, I wrote papers in all of my classes, including science and math. Writing helped the ideas I was learning make more sense. Writing allowed me to put the theories that I learned into practice and helped me understand what I learned. Writing also helped me make sure that I could communicate my ideas to my peers and professors in a way they could understand. Writing is how I grew.&lt;/p&gt;

&lt;p&gt;Writing is a critical skill for developers. Whether it‚Äôs documenting code, documenting your process/product (in a way that doesn‚Äôt assume a certain level of familiarity so that everyone can understand), or sharing something you know on your blog or in a response to a question on StackOverflow, developers need to know how to write. I think it‚Äôs a huge part of how we grow.&lt;/p&gt;

&lt;h5&gt;How, Not What, to Learn&lt;/h5&gt;

&lt;p&gt;The most valuable skill I learned in my liberal arts education was how to learn. I was never spoon fed what I need to learn in order to pass some test. Instead, I learned how to search for what information was missing in my understanding of a topic and make the most of a resource. It was a critical mindset to have.&lt;/p&gt;

&lt;p&gt;Being a front end dev requires this skill. Whether it‚Äôs learning a new language or (another) JS framework, a new naming convention, etc. There is always something new to learn, and it‚Äôs up to me to find the resources and learn.&lt;/p&gt;

&lt;p&gt;So, Mama Millsaps, here‚Äôs to you for preparing me for a career I never thought I would have. Go Majors.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 -0500</pubDate>
        <link>http://www.jessecrow.com/blog/2016/11/02/libarts-in-tech.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2016/11/02/libarts-in-tech.html</guid>
        
        
      </item>
    
      <item>
        <title>Tutorial: Make a Sassy Guessing Game</title>
        <description>&lt;p&gt;A couple months ago, I gave my first technical talk outside of a classroom setting (!), but forgot to blog about it until now. Let‚Äôs learn how to use Sass to make a number guessing game! &lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;Eygoao&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;crowjm&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Sass Number Guess Game-Final&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/crowjm/pen/Eygoao/&quot;&gt;Sass Number Guess Game-Final&lt;/a&gt; by Jesse Crow (&lt;a href=&quot;http://codepen.io/crowjm&quot;&gt;@crowjm&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The final game.&lt;/p&gt;

&lt;p&gt;The guessing game works as such: there are five choices, numbers 1 through 5, that you can guess by clicking on or selecting with your keyboard. The goal is to guess the same number that the computer ‚Äúthought‚Äù of. If your guess is correct, one set of styles will render. If your guess is incorrect, a different set of styles will render.&lt;/p&gt;

&lt;p&gt;To build our guessing game, the first thing we‚Äôll need to do is get a random number. There are two Sass number functions that we‚Äôll use to get our random number.&lt;/p&gt;

&lt;p&gt;The first is &lt;code class=&quot;language-sass&quot;&gt;random($number)&lt;/code&gt;. This returns a random number with 0 as the lowest possible value and $number (the value we pass into the function) as the highest possible value. For example, if I write random(5), the computer will generate a number anywhere between 0 and 5.&lt;/p&gt;

&lt;p&gt;The random number the computer generates isn‚Äôt necessarily going to be a whole number, which is what we need for the game. We‚Äôll also use &lt;code class=&quot;language-css&quot;&gt;round($number)&lt;/code&gt;, which rounds the number we pass into it to the closest whole number, whether that‚Äôs higher or lower. For example, if I write &lt;code class=&quot;language-sass&quot;&gt;random(4.25)&lt;/code&gt;, the computer will round it to 4.&lt;/p&gt;

&lt;p&gt;To make sure we‚Äôre using the same number in every part of the logic in the same session, we‚Äôll store our random number in a variable called random-number. We can also pass that variable of random-number into the round number function, so that we will have a nice, whole number to work with.&lt;/p&gt;

&lt;pre class=&quot;language-sass&quot;&gt;&lt;code class=&quot;language-sass&quot;&gt;$random-number: random(5);
round($random-number)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next tool we‚Äôll need in our toolbox are equality operators. This way we can see if the random number is equal to one of the numbers that can be guessed. There are two equality operators in Sass: &lt;code class=&quot;language-sass&quot;&gt;!=&lt;/code&gt; is not equal to and &lt;code class=&quot;language-sass&quot;&gt;==&lt;/code&gt; is equal to. We‚Äôll use &lt;code class=&quot;language-sass&quot;&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next piece of Sass magic we‚Äôll use are control directives, which &lt;a href=&quot;http://thesassway.com/intermediate/if-for-each-while&quot;&gt;The Sass Way&lt;/a&gt; summarizes well as ‚Äúprovide flow and logic and give you a finite level of decision making.‚Äù In the game, we want one set of styles to run if the correct number is chosen, and other set of styles to run if the correct number is not chosen. This is a perfect use case for Sass‚Äô &lt;code class=&quot;language-sass&quot;&gt;@if&lt;/code&gt; and &lt;code class=&quot;language-sass&quot;&gt;@else&lt;/code&gt; control directives. &lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;language-sass&quot;&gt;@if&lt;/code&gt; directive, we‚Äôll first set the styles that should render if the user guesses the correct matching number. We‚Äôll do so by saying &lt;code class=&quot;language-sass&quot;&gt;@if round($random-number) == 1 {styles in here}&lt;/code&gt;. Then we‚Äôll use &lt;code class=&quot;language-sass&quot;&gt;@else {styles here}&lt;/code&gt; to set the styles that render if the user guesses incorrectly. We‚Äôll have to write this same code out using each number 1 through 5 in the &lt;code class=&quot;language-sass&quot;&gt;@if&lt;/code&gt; control directive (but I‚Äôm only going to show it for the number 1 for the sake of brevity).&lt;/p&gt;

&lt;pre class=&quot;language-sass&quot;&gt;
	&lt;code class=&quot;language-sass&quot;&gt;
		@if round($random-number) == 1 {
		    background-color: pink;
		    background-image: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/229892/ice-cream-parrot.gif);
		    background-repeat: no-repeat;
		    background-size: cover;
		    transition: background-color 1s ease;
		  }
		  @else {
		    background-color: #000;
		    transition: background-color 1s ease;
		  }
		}
		/*write out again, changing the number in the first line to 2, 3, 4, and 5*/
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now, we‚Äôve got our random number, our logic, and our styles and they will all be consistently applied to each number. Try it out! (You will need to refresh though to get another random number). &lt;/p&gt;

&lt;p&gt;However, with the help of a little more Sass magic, we can DRY our code out and make it reusable. ‚ú®‚ú®‚ú®Refactoring time!‚ú®‚ú®‚ú®&lt;/p&gt;

&lt;p&gt;Since we want to reuse the same if/else logic and corresponding styles, we can place the code inside a mixin. We‚Äôll call our mixin game-logic, and pass it $number. Then, in our &lt;code class=&quot;language-sass&quot;&gt;@if&lt;/code&gt; control directive, instead of writing &lt;code class=&quot;language-sass&quot;&gt;@if round($random-number) == 1, 2, 3, 4, 5&lt;/code&gt;, we can write &lt;code class=&quot;language-sass&quot;&gt;@if round($random-number) == $number&lt;/code&gt;. Much simpler and reusable!&lt;/p&gt;

&lt;pre class=&quot;language-sass&quot;&gt;
	&lt;code class=&quot;language-sass&quot;&gt;
		@mixin logic ($number) {
		  @if round($random-number) == $number {
		    background-color: pink;
		    background-image: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/229892/ice-cream-parrot.gif);
		    background-repeat: no-repeat;
		    background-size: cover;
		    transition: background-color 1s ease;
		  }
		  @else {
		    background-color: #000;
		    transition: background-color 1s ease;
		  }
		}

		#number1:checked + span::before {
		  @include logic(1);
		}

		#number2:checked + span::before {
		  @include logic(2);
		}

		#number3:checked + span::before {
		  @include logic(3);
		}

		#number4:checked + span::before {
		  @include logic(4);
		}

		#number5:checked + span::before {
		  @include logic(5);
		}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We can DRY out our code even more using interpolation and the &lt;code class=&quot;language-sass&quot;&gt;@each&lt;/code&gt; control directive. &lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-sass&quot;&gt;@each&lt;/code&gt; control directive allows us to apply particular styles to each item in a list. We have a list of IDs, #number1 all the way to #number5 that we want to apply the same mixin to. The first thing we do in our control directive is create our list. We‚Äôre going to write each $number in 1, 2, 3, 4, 5, so that we can access all those numbers as $number in our mixin. &lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-sass&quot;&gt;@each $number in 1, 2, 3, 4, 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, using interpolation and &lt;code class=&quot;language-sass&quot;&gt;@each&lt;/code&gt;‚Äôs looping ability, we can write a line that targets each of our ID names #number1-#number5. #number is the start to all our IDs, then #{$number} interpolates all of the numbers that we set in the first line of code, outputting #number1 all the way to #number5. Then we set the rest of what we want to target, and include the mixin, passing it $number, so that the correct number and ID name will be used at the same time. The final code block for this will look like: &lt;/p&gt;

&lt;pre class=&quot;language-sass&quot;&gt;
	&lt;code class=&quot;language-sass&quot;&gt;
		@each $number in 1, 2, 3, 4, 5 {
		  #number#{$number}:checked + span::before {
		    @include game-logic($number);
		  }
		}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;There are more things that went into building this game other than the Sass logic and refactoring. However, those were the most important things to cover in this talk. This game also uses a version of the checkbox hack (you can read more about that here and here), and I spent time ensuring that it could be played if a user could only use their keyboard.&lt;/p&gt;

&lt;p&gt;I learned a lot about refactoring and some Sass super powers making this demo and crafting the corresponding talk. And it let me get out of my comfort zone and practice my public speaking skills. Thanks for having me, ATXSass!&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://www.jessecrow.com/blog/2016/10/31/sassy-guessing-game.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2016/10/31/sassy-guessing-game.html</guid>
        
        
      </item>
    
      <item>
        <title>Teaching Kids to Code</title>
        <description>&lt;p&gt;I‚Äôve been thinking a lot recently about one of my favorite experiences I had last year and something I hope to do more of this year: teaching kids coding classes. &lt;/p&gt;

&lt;p&gt;Last fall, I spent four Tuesday afternoons teaching 5th graders from a local elementary school basic HTML and CSS. They caught on really quickly and were endlessly curious. It was so fun for me to see them have ‚Äúclick moments‚Äù and put their newly learned skills to use. &lt;/p&gt;

&lt;p&gt;We created one &lt;a href=&quot;http://codepen.io/theironyardatxkids/&quot;&gt;CodePen account&lt;/a&gt; that all the students had access to, and from there they each created their own pens. Using CodePen worked out really well as we were able to focus more time on coding skills instead of learning a software. I was also able to create demo pens on things like animation and making shapes using code for the students to reference and have a pen for questions and answers that they could use after the classes ended.&lt;/p&gt;

&lt;p&gt;I think kids learning how to code is important, but not just because of the skill itself. Learning to code is so much more‚Äìit teaches skills that are useful in any subject, from language arts, to social studies, to science. Learning to code improves problem solving and critical thinking skills. I encouraged the students who understood a concept to help teach their peers who didn‚Äôt understand it yet, which helped promote teamwork. We also talked a lot about frustrations: there‚Äôs a lot of frustrations that come along with coding, but learning how to manage them and channel the frustration into solving the problem is an invaluable skill. &lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://www.jessecrow.com/blog/2016/01/20/kids-classes.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2016/01/20/kids-classes.html</guid>
        
        
      </item>
    
      <item>
        <title>2016 Dev/Design Goals</title>
        <description>&lt;p&gt;I can‚Äôt believe it‚Äôs already 2016! Time has flown by, especially because I‚Äôve been getting acclimated to a new job, new workflow, and learning so many new things. &lt;/p&gt;

&lt;p&gt;2016 will be my first full year as a developer/designer, and I want to make sure I make the most of it. I‚Äôm only starting to scatch the surface of things to learn and I‚Äôm in awe of all the things I don‚Äôt know that I don‚Äôt know (and very excited to learn about them!). &lt;/p&gt;

&lt;p&gt;To stay on track, I made a list of goals I want to accomplish this year. You can find them over on my GitHub &lt;a href=&quot;https://github.com/crowjm/2016-goals&quot;&gt;here&lt;/a&gt;. I‚Äôve started breaking things down into managable steps and I think hosting my goals on GitHub will be a good way to easily edit and add things, stay on track/be held accountable, and get feedback on resources, etc. &lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://www.jessecrow.com/blog/2016/01/11/goals.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2016/01/11/goals.html</guid>
        
        
      </item>
    
      <item>
        <title>Desk Dancin&#39; Vol 1</title>
        <description>&lt;p&gt;A few posts back, I mentioned how important the right music is to my process. I‚Äôm also a big proponet of dancing all the time, but especially when I get stressed, stumped, need a break, or need to get excited about what I‚Äôm working on.&lt;/p&gt;

&lt;p&gt;Today I present Desk Dancin‚Äô Vol 1: a collection of songs that gets me moving and in the zone to get stuff done.&lt;/p&gt;

&lt;iframe src=&quot;https://embed.spotify.com/?uri=spotify%3Auser%3Ajessecrow%3Aplaylist%3A5hc63AvAHoiSAQ71AolWNg&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://www.jessecrow.com/blog/2015/10/12/desk-dancing-playlist.html</link>
        <guid isPermaLink="true">http://www.jessecrow.com/blog/2015/10/12/desk-dancing-playlist.html</guid>
        
        
      </item>
    
  </channel>
</rss>
